(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{"./doc/tutorials/hello-world.mdx":function(e,n,t){"use strict";t.r(n);var o=t("./node_modules/react/index.js"),a=t.n(o),m=t("./node_modules/@mdx-js/tag/dist/index.js");function r(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},m=Object.keys(e);for(o=0;o<m.length;o++)t=m[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var m=Object.getOwnPropertySymbols(e);for(o=0;o<m.length;o++)t=m[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}n.default=function(e){var n=e.components;r(e,["components"]);return a.a.createElement(m.MDXTag,{name:"wrapper",components:n},a.a.createElement(m.MDXTag,{name:"h1",components:n,props:{id:"hello-world"}},"Hello, world!"),a.a.createElement(m.MDXTag,{name:"p",components:n},"This guide aims to provide a basic setup, create a simple web component and display it on the object card."),a.a.createElement(m.MDXTag,{name:"h2",components:n,props:{id:"creating-a-plugin"}},"Creating a plugin"),a.a.createElement(m.MDXTag,{name:"p",components:n},"To get started, run ",a.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"lime-project")," to create a new plugin"),a.a.createElement(m.MDXTag,{name:"pre",components:n},a.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-sh",metaString:""}},"lime-project new package\n")),a.a.createElement(m.MDXTag,{name:"p",components:n},"It can be named anything, but in this guide we are sticking to the default and naming it ",a.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"My Plugin"),"."),a.a.createElement(m.MDXTag,{name:"h2",components:n,props:{id:"generating-a-web-component"}},"Generating a web component"),a.a.createElement(m.MDXTag,{name:"p",components:n},"Enter the plugin directory and generate a new web component:"),a.a.createElement(m.MDXTag,{name:"pre",components:n},a.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-sh",metaString:""}},'cd my-plugin\nlime-project generate web-component hello-world --slot "object.card.head.panels"\n')),a.a.createElement(m.MDXTag,{name:"p",components:n},"When the first component is created, some project setup is needed which might take a while to complete."),a.a.createElement(m.MDXTag,{name:"h2",components:n,props:{id:"rendering-the-component"}},"Rendering the component"),a.a.createElement(m.MDXTag,{name:"p",components:n},"Once the setup is complete, we can change directory to the root directory of the web components, and start our favorite editor."),a.a.createElement(m.MDXTag,{name:"pre",components:n},a.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-sh",metaString:""}},"cd frontend\ncode .\n")),a.a.createElement(m.MDXTag,{name:"p",components:n},"Our hello-world component is located in ",a.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"src/components/lwc-my-plugin-hello-world/lwc-my-plugin-hello-world.tsx"),". The file contains a lot of auto generated code that is useful, but not required for our simple hello-world component. We can remove most of it, but we have to keep the properties that belong to the ",a.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"LimeWebComponent")," interface, along with the ",a.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"render")," method."),a.a.createElement(m.MDXTag,{name:"p",components:n},"The finished component should look something like this:"),a.a.createElement(m.MDXTag,{name:"pre",components:n},a.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-tsx",metaString:""}},"import { Component, Element, Prop } from '@stencil/core';\nimport { LimeWebComponent, LimeWebComponentContext, LimeWebComponentPlatform } from '@limetech/lime-web-components-interfaces';\n\n@Component({\n    tag: 'lwc-my-plugin-hello-world',\n    shadow: true\n})\nexport class HelloWorld implements LimeWebComponent {\n    @Prop()\n    public platform: LimeWebComponentPlatform;\n\n    @Prop()\n    public context: LimeWebComponentContext;\n\n    @Element()\n    public element: HTMLElement;\n\n    public render() {\n        return <p>Hello, world!</p>;\n    }\n}\n")),a.a.createElement(m.MDXTag,{name:"h2",components:n,props:{id:"building-the-component"}},"Building the component"),a.a.createElement(m.MDXTag,{name:"p",components:n},"To build the component, execute the following from the console."),a.a.createElement(m.MDXTag,{name:"pre",components:n},a.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{metaString:null}},"npm run build\n")),a.a.createElement(m.MDXTag,{name:"h2",components:n,props:{id:"installing-the-plugin"}},"Installing the plugin"),a.a.createElement(m.MDXTag,{name:"p",components:n},"We are now ready to install our plugin in the webclient. Open the Lime command prompt, and run the following:"),a.a.createElement(m.MDXTag,{name:"pre",components:n},a.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-sh",metaString:""}},"pip install -e <path-to-plugin>\n")),a.a.createElement(m.MDXTag,{name:"p",components:n},"Once the webserver has been restarted, we should see our hello-world component render itself in the object card header."))}}}]);