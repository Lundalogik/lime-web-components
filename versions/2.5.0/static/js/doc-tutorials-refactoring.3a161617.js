(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{"./doc/tutorials/refactoring.mdx":function(e,n,t){"use strict";t.r(n);var i=t("./node_modules/react/index.js"),o=t.n(i),a=t("./node_modules/@mdx-js/tag/dist/index.js");function s(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}n.default=function(e){var n=e.components;s(e,["components"]);return o.a.createElement(a.MDXTag,{name:"wrapper",components:n},o.a.createElement(a.MDXTag,{name:"h1",components:n,props:{id:"keeping-it-simple-refactoring"}},"Keeping it Simple (Refactoring)"),o.a.createElement(a.MDXTag,{name:"p",components:n},"Ok, so, you've worked for a while on your component, and you've come quite a way. The component does a number of different things. Great! But, the code is getting complicated and unwieldy\u2026"),o.a.createElement(a.MDXTag,{name:"p",components:n},"It's time to refactor!"),o.a.createElement(a.MDXTag,{name:"p",components:n},"If you've never heard of ",o.a.createElement(a.MDXTag,{name:"em",components:n,parentName:"p"},"refactoring"),", it's simply the process of changing the ",o.a.createElement(a.MDXTag,{name:"em",components:n,parentName:"p"},"code")," without changing what the code ",o.a.createElement(a.MDXTag,{name:"em",components:n,parentName:"p"},"does"),". This might sound counter-productive at first, but I promise you, it's the very opposite!"),o.a.createElement(a.MDXTag,{name:"p",components:n},"In this tutorial, I'll walk you through a real-world example of refactoring a component, going from a single large component, responsible for doing many different things, and in which almost everything is done by one giant render-method, to several small components, each responsible for a single part of the whole, and isolated so that changes to one part does not inadvertently affect another."),o.a.createElement(a.MDXTag,{name:"p",components:n},"Below is a real-world example of a component in development. It's over 350 lines of code, and over 200 of those are in the render-method. Let's see what we can do to make this a little simpler to work with. (You ",o.a.createElement(a.MDXTag,{name:"em",components:n,parentName:"p"},"don't")," need to read and understand the file below, it's just there for reference. We'll look at a few specific parts of it below.)"),o.a.createElement(a.MDXTag,{name:"p",components:n},o.a.createElement(a.MDXTag,{name:"em",components:n,parentName:"p"},"Please note:")," Since this code was a work in progress when copied to this tutorial, the functionality is incomplete, and there are several things that could be done to improve the code besides refactoring. In this tutorial, we will only be focusing on how to refactor the code."),o.a.createElement(a.MDXTag,{name:"pre",components:n},o.a.createElement(a.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-tsx",metaString:""}},'import { Component, Element, h, Prop, State } from \'@stencil/core\';\n// import { DateType } from \'@limetech/lime-elements\';\nimport { Option } from \'@limetech/lime-elements\';\nimport { CurrentLimeobject, CurrentLimetype, CurrentUser } from \'@limetech/lime-web-components-decorators\';\nimport {\n    LimeWebComponent,\n    LimeWebComponentContext,\n    LimeWebComponentPlatform,\n    LimeobjectsStateService\n} from \'@limetech/lime-web-components-interfaces\';\n\nconst MIN_BVALUE = 0;\nconst MIN_REASON_LENGTH = 1;\n\n@Component({\n    tag: \'lwc-solution-business-status\',\n    shadow: true,\n    styleUrl: \'lwc-solution-business-status.scss\',\n})\nexport class BusinessStatus implements LimeWebComponent {\n    @Prop()\n    public platform: LimeWebComponentPlatform;\n\n    @Prop()\n    public context: LimeWebComponentContext;\n\n    @Element()\n    public element: HTMLElement;\n\n    @State()\n    private datetime = new Date();\n\n    @State()\n    private isOpen = false;\n\n    @State()\n    private isOpen500k = false;\n\n    @State()\n    private isOpenTodo = false;\n\n    @State()\n    private isCreateTodo = false;\n\n    @State()\n    private wonlostreason = \'\';\n\n    @State()\n    private todoNote = \'\';\n\n    @State()\n    private bValue: number;\n\n    @State()\n    private isConfirmationOpen = false;\n\n    @State()\n    public basicValue: Option;\n\n    @State()\n    public businesstatusValue: Option\n\n    @State()\n    public toggleValue: Option;\n\n    @State()\n    public disabled = false;\n\n    @State()\n    public optionGroup = 0;\n\n    @CurrentLimeobject()\n    @State()\n    private limeobject: object;\n\n    @CurrentLimetype()\n    @State()\n    private limetype: object;\n\n    private basicOptions: Option[] = [];\n\n    componentWillLoad() {\n        if (this.context.limetype === "company" && this.limeobject) {\n            this.basicOptions = this.limetype[\'properties\'][\'businesstatus\'][\'options\'].map(function(i) {return {text: i.text, value: i.key}})\n            this.businesstatusValue = this.basicOptions.find(o => o.value === this.limeobject[\'businesstatus\'])\n        }\n    }\n\n    public render() {\n\n        if (this.context.limetype === "company" && this.limeobject) {\n\n            return [\n                <limel-button\n                    primary={true}\n                    label="Change businesstatus"\n                    onClick={() => {\n                        this.isOpen = true;\n                    }}\n                />,\n                <limel-dialog\n                    heading="Change businesstatus"\n                    open={this.isOpen}\n                    closingActions={{ escapeKey: false, scrimClick: false }}\n                    onClose={() => {\n                        this.isOpen = false;\n                    }}\n                    onClosing={() => {\n                        this.isConfirmationOpen = true;\n                    }}\n                >\n                    <form>\n                        <p>\n                            <limel-select\n                                options={this.basicOptions}\n                                value={this.businesstatusValue}\n                                label="Business Status"\n                                onChange={event => {\n                                    if (event.detail) {\n                                        this.businesstatusValue = event.detail as Option;\n                                    };\n                                }}\n                            />\n                            <p>Value: {JSON.stringify(this.businesstatusValue)}</p>\n                        </p>\n                        {this.businesstatusValue[\'value\'] === \'tender\' && this.limeobject[\'tendervalue\'] === 0\n\n                        ?<p>\n                            <limel-input-field\n                                label="Quotevalue"\n                                key="tender"\n                                value={this.bValue ?this.bValue :this.limeobject[\'tendervalue\']}\n                                required={true}\n                                formatNumber={true}\n                                type="number"\n                                invalid={!this.bValueValid()}\n                                onChange={event => {\n                                    this.bValue = +event.detail;\n                                }}\n                            />\n                        </p>\n                        :<p />\n                        }\n                        {this.businesstatusValue[\'value\'] === \'agreement\' && this.limeobject[\'businessvalue\'] === 0\n\n                        ?<p>\n                            <limel-input-field\n                                label="Businessvalue"\n                                key="agreement"\n                                value={this.bValue ?this.bValue :this.limeobject[\'businessvalue\']}\n                                formatNumber={true}\n                                type="number"\n                                invalid={!this.bValueValid()}\n                                onChange={event => {\n                                    this.bValue = +event.detail;\n                                }}\n                            />\n                        </p>\n                        :<p />\n                        }\n                        {this.businesstatusValue[\'value\'] === \'agreement\'\n                        ?<p>\n                            <limel-input-field\n                                label="Won reason"\n                                required={true}\n                                key="agreement"\n                                value={this.wonlostreason}\n                                invalid={!this.wonLostReasonValid()}\n                                onChange={event => {\n                                    this.wonlostreason = event.detail;\n                                }}\n                            />\n                        </p>\n                        :<p />\n                        }\n                        {this.businesstatusValue[\'value\'] === \'rejection\'\n                        ?<p>\n                            <limel-input-field\n                                label="Lost reason"\n                                required={true}\n                                key="rejection"\n                                value={this.wonlostreason}\n                                invalid={!this.wonLostReasonValid()}\n                                onChange={event => {\n                                    this.wonlostreason = event.detail;\n                                }}\n                            />\n                        </p>\n                        :<p />\n                        }\n                    </form>\n                    <limel-button-group class="reverse-order" slot="button">\n                        <limel-button\n                            primary={true}\n                            label="Save"\n                            disabled={!this.bValueValid()}\n                            onClick={() => {\n                                this.submitForm();\n                                console.log(this.bValue);\n                                console.log(this.wonlostreason);\n                                this.isCreateTodo = true;\n                                if (this.bValue > 500000) {\n                                    this.isOpen500k = true;\n                                }\n                            }}\n                        />\n                        <limel-button label="Cancel" onClick={this.closeDialog} />\n                    </limel-button-group>\n                </limel-dialog>,\n\n                // TODO\n                <limel-dialog\n                    open={this.isCreateTodo}\n                    closingActions={{ escapeKey: false, scrimClick: false }}\n                    onClose={() => {\n                        this.isCreateTodo = false;\n                    }}\n                >\n                    <p>Do you wanna create a ToDo?</p>\n                    <limel-button-group class="reverse-order" slot="button">\n                        <limel-button\n                            primary={true}\n                            label="Yes"\n                            onClick={() => {\n                                this.isOpenTodo = true\n                                this.isCreateTodo = false\n                            }}\n                        />\n                        <limel-button label="No" onClick={() => {this.isCreateTodo = false}} />\n                    </limel-button-group>\n                </limel-dialog>,\n\n                <limel-dialog\n                    heading="Todo"\n                    open={this.isOpenTodo}\n                    closingActions={{ escapeKey: false, scrimClick: false }}\n                    onClose={() => {\n                        this.isOpenTodo = false;\n                    }}\n                >\n                    <form>\n                        <p>\n                            <limel-input-field\n                                label="Comment"\n                                value={this.todoNote}\n                                onChange={event => {\n                                    this.todoNote = event.detail;\n                                }}\n                            />\n                        </p>\n                    </form>\n                    <p>\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0<limel-date-picker\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0type="datetime"\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0label="Date"\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0value={this.datetime}\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0onChange={event => { // tslint:disable-line:jsx-no-lambda prettier\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0this.handleChange(event);\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0}}\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0/>\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0<p style={{ \'font-size\': \'small\' }}>\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0Value:{\' \'}\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0<code>\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0{this.datetime\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0? this.datetime.toString()\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0: JSON.stringify(this.datetime)}\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0</code>\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0</p>\n    \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0</p>\n\n                    <limel-button-group class="reverse-order" slot="button">\n                        <limel-button\n                            primary={true}\n                            label="Save todo"\n                            onClick={this.createTodo}\n                        />\n                        <limel-button label="Cancel" onClick={ () => {this.isOpenTodo = false;}} />\n                    </limel-button-group>\n                </limel-dialog>,\n\n                // Credit check\n                <limel-dialog\n                    open={this.isOpen500k}\n                    closingActions={{ escapeKey: false, scrimClick: false }}\n                    onClose={() => {\n                        this.isOpen500k = false;\n                    }}\n                >\n                    <p>THIS IS A LOT OF MONEY.</p>\n                    <limel-button-group slot="button">\n                        <limel-button\n                            label="Ok"\n                            onClick={() => {\n                                this.isOpen500k = false;\n                            }}\n                        />\n                    </limel-button-group>\n                </limel-dialog>,\n            ];\n        }\n    }\n\n    private bValueValid() {\n        return this.bValue > MIN_BVALUE;\n    }\n\n    private wonLostReasonValid() {\n        return this.wonlostreason.length >= MIN_REASON_LENGTH;\n    }\n\n    private submitForm = () => {\n\n        let body = {\n            status: this.businesstatusValue[\'value\'],\n            businessvalue: this.bValue,\n            wonlostreason: this.wonlostreason,\n            business: this.context.id\n        }\n        console.log(body)\n        this.saveData(body)\n        this.closeDialog();\n    };\n\n    private createTodo = () => {\n        let body = {\n            status: this.businesstatusValue[\'value\'],\n            note: this.todoNote,\n            business: this.context.id\n        }\n        console.log(body)\n        // this.saveTodo(this.todoNote);\n        console.log(this.todoNote)\n    }\n\n    private async saveData(body) {\n        // const url = \'changebusinesstatus/update/\';\n        const objectService: LimeobjectsStateService = this.platform.state.limeobjects;\n\n        // Call endpoint that will save some data on the object\n        await this.platform.http.post(\'changebusinesstatus/update/\', body);\n\n        // Manually refresh the object in the webclient, if the method is available\n        if (objectService.reloadObject) {\n            objectService.reloadObject(this.context.limetype, this.context.id);\n        }\n\n    }\n\n    // private async saveTodo (body) {\n\n    //     // const http: HttpService = this.platform.http;\n    //     // const url = `my_addon/my_endpoint/?id=${this.context.id}`;\n    //     const objectService: LimeobjectsStateService = this.platform.state.limeobjects;\n\n    //     // Call endpoint that will save some data on the object\n    //     // await http.put(url, data);\n\n    //     // Manually refresh the object in the webclient, if the method is available\n    //     // if (objectService.reloadObject) {\n    //     //     objectService.reloadObject(this.context.limetype, this.context.id);\n    //     // }\n    // }\n\n    private closeDialog = () => {\n        this.isOpen = false;\n    };\n\n\xa0\xa0\xa0\xa0private handleChange(event) {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0this.datetime = event.detail;\n    };\n}\n')),o.a.createElement(a.MDXTag,{name:"h2",components:n,props:{id:"breaking-out-functions"}},"Breaking out functions"),o.a.createElement(a.MDXTag,{name:"p",components:n},"Let's focus on that render-method for now. Here it is again, but this time, I've removed a lot of detail that we don't need to care about right now:"),o.a.createElement(a.MDXTag,{name:"pre",components:n},o.a.createElement(a.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-tsx",metaString:""}},'    public render() {\n\n        if (this.context.limetype === "company" && this.limeobject) {\n\n            return [\n                <limel-button\n                    label="Change businesstatus"\n                    onClick={() => {\n                        this.isOpen = true;\n                    }}\n                />,\n\n\n                <limel-dialog\n                    heading="Change businesstatus"\n                    open={this.isOpen}\n                >\n                    <form>\n                    </form>\n                    <limel-button-group class="reverse-order" slot="button">\n                        <limel-button\n                            label="Save"\n                            onClick={() => {\n                                this.isCreateTodo = true;\n                                if (this.bValue > 500000) {\n                                    this.isOpen500k = true;\n                                }\n                            }}\n                        />\n                        <limel-button label="Cancel" onClick={this.closeDialog} />\n                    </limel-button-group>\n                </limel-dialog>,\n\n\n                // TODO\n                <limel-dialog\n                    open={this.isCreateTodo}\n                >\n                    <p>Do you wanna create a ToDo?</p>\n                    <limel-button-group class="reverse-order" slot="button">\n                        <limel-button\n                            label="Yes"\n                            onClick={() => {\n                                this.isOpenTodo = true\n                                this.isCreateTodo = false\n                            }}\n                        />\n                        <limel-button label="No" onClick={() => {this.isCreateTodo = false}} />\n                    </limel-button-group>\n                </limel-dialog>,\n\n\n                <limel-dialog\n                    heading="Todo"\n                    open={this.isOpenTodo}\n                >\n                    <form>\n                    </form>\n                    <limel-button-group class="reverse-order" slot="button">\n                        <limel-button\n                            label="Save todo"\n                            onClick={this.createTodo}\n                        />\n                        <limel-button label="Cancel" onClick={ () => {this.isOpenTodo = false;}} />\n                    </limel-button-group>\n                </limel-dialog>,\n\n\n                // Credit check\n                <limel-dialog\n                    open={this.isOpen500k}\n                >\n                    <p>THIS IS A LOT OF MONEY.</p>\n                    <limel-button-group slot="button">\n                        <limel-button\n                            label="Ok"\n                            onClick={() => {\n                                this.isOpen500k = false;\n                            }}\n                        />\n                    </limel-button-group>\n                </limel-dialog>,\n            ];\n        }\n    }\n')),o.a.createElement(a.MDXTag,{name:"p",components:n},"We can see that there is a button, followed by a series of dialogs. When the user clicks the button, the first dialog is opened. If the user clicks the save-button in that dialog, the second dialog is opened, and so on."),o.a.createElement(a.MDXTag,{name:"p",components:n},"Let's start by putting each dialog in a private method, called by the render-method:"),o.a.createElement(a.MDXTag,{name:"pre",components:n},o.a.createElement(a.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-tsx",metaString:""}},'    private renderChangeStatusDialog() {\n        return (\n            <limel-dialog\n                heading="Change businesstatus"\n                open={this.isOpen}\n                closingActions={{ escapeKey: false, scrimClick: false }}\n                onClose={() => {\n                    this.isOpen = false;\n                }}\n                onClosing={() => {\n                    this.isConfirmationOpen = true;\n                }}\n            >\n                <form>\n                    <p>\n                        <limel-select\n                            options={this.basicOptions}\n                            value={this.businesstatusValue}\n                            label="Business Status"\n                            onChange={event => {\n                                if (event.detail) {\n                                    this.businesstatusValue = event.detail as Option;\n                                };\n                            }}\n                        />\n                        <p>Value: {JSON.stringify(this.businesstatusValue)}</p>\n                    </p>\n                    {this.businesstatusValue[\'value\'] === \'tender\' && this.limeobject[\'tendervalue\'] === 0\n\n                    ?<p>\n                        <limel-input-field\n                            label="Quotevalue"\n                            key="tender"\n                            value={this.bValue ?this.bValue :this.limeobject[\'tendervalue\']}\n                            required={true}\n                            formatNumber={true}\n                            type="number"\n                            invalid={!this.bValueValid()}\n                            onChange={event => {\n                                this.bValue = +event.detail;\n                            }}\n                        />\n                    </p>\n                    :<p />\n                    }\n                    {this.businesstatusValue[\'value\'] === \'agreement\' && this.limeobject[\'businessvalue\'] === 0\n\n                    ?<p>\n                        <limel-input-field\n                            label="Businessvalue"\n                            key="agreement"\n                            value={this.bValue ?this.bValue :this.limeobject[\'businessvalue\']}\n                            formatNumber={true}\n                            type="number"\n                            invalid={!this.bValueValid()}\n                            onChange={event => {\n                                this.bValue = +event.detail;\n                            }}\n                        />\n                    </p>\n                    :<p />\n                    }\n                    {this.businesstatusValue[\'value\'] === \'agreement\'\n                    ?<p>\n                        <limel-input-field\n                            label="Won reason"\n                            required={true}\n                            key="agreement"\n                            value={this.wonlostreason}\n                            invalid={!this.wonLostReasonValid()}\n                            onChange={event => {\n                                this.wonlostreason = event.detail;\n                            }}\n                        />\n                    </p>\n                    :<p />\n                    }\n                    {this.businesstatusValue[\'value\'] === \'rejection\'\n                    ?<p>\n                        <limel-input-field\n                            label="Lost reason"\n                            required={true}\n                            key="rejection"\n                            value={this.wonlostreason}\n                            invalid={!this.wonLostReasonValid()}\n                            onChange={event => {\n                                this.wonlostreason = event.detail;\n                            }}\n                        />\n                    </p>\n                    :<p />\n                    }\n                </form>\n                <limel-button-group class="reverse-order" slot="button">\n                    <limel-button\n                        primary={true}\n                        label="Save"\n                        disabled={!this.bValueValid()}\n                        onClick={() => {\n                            this.submitForm();\n                            console.log(this.bValue);\n                            console.log(this.wonlostreason);\n                            this.isCreateTodo = true;\n                            if (this.bValue > 500000) {\n                                this.isOpen500k = true;\n                            }\n                        }}\n                    />\n                    <limel-button label="Cancel" onClick={this.closeDialog} />\n                </limel-button-group>\n            </limel-dialog>\n        );\n    }\n\n    private renderCreateTodoDialog() {\n        return (\n            <limel-dialog\n                open={this.isCreateTodo}\n                closingActions={{ escapeKey: false, scrimClick: false }}\n                onClose={() => {\n                    this.isCreateTodo = false;\n                }}\n            >\n                <p>Do you wanna create a ToDo?</p>\n                <limel-button-group class="reverse-order" slot="button">\n                    <limel-button\n                        primary={true}\n                        label="Yes"\n                        onClick={() => {\n                            this.isOpenTodo = true\n                            this.isCreateTodo = false\n                        }}\n                    />\n                    <limel-button label="No" onClick={() => {this.isCreateTodo = false}} />\n                </limel-button-group>\n            </limel-dialog>\n        );\n    }\n\n    private renderOpenTodoDialog() {\n        return (\n            <limel-dialog\n                heading="Todo"\n                open={this.isOpenTodo}\n                closingActions={{ escapeKey: false, scrimClick: false }}\n                onClose={() => {\n                    this.isOpenTodo = false;\n                }}\n            >\n                <form>\n                    <p>\n                        <limel-input-field\n                            label="Comment"\n                            value={this.todoNote}\n                            onChange={event => {\n                                this.todoNote = event.detail;\n                            }}\n                        />\n                    </p>\n                </form>\n                <p>\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0<limel-date-picker\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0type="datetime"\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0label="Date"\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0value={this.datetime}\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0onChange={event => { // tslint:disable-line:jsx-no-lambda prettier\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0this.handleChange(event);\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0}}\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0/>\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0<p style={{ \'font-size\': \'small\' }}>\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0Value:{\' \'}\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0<code>\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0{this.datetime\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0? this.datetime.toString()\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0: JSON.stringify(this.datetime)}\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0</code>\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0</p>\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0</p>\n\n                <limel-button-group class="reverse-order" slot="button">\n                    <limel-button\n                        primary={true}\n                        label="Save todo"\n                        onClick={this.createTodo}\n                    />\n                    <limel-button label="Cancel" onClick={ () => {this.isOpenTodo = false;}} />\n                </limel-button-group>\n            </limel-dialog>\n        );\n    }\n\n    private renderCreditCheckDialog() {\n        return (\n            <limel-dialog\n                open={this.isOpen500k}\n                closingActions={{ escapeKey: false, scrimClick: false }}\n                onClose={() => {\n                    this.isOpen500k = false;\n                }}\n            >\n                <p>THIS IS A LOT OF MONEY.</p>\n                <limel-button-group slot="button">\n                    <limel-button\n                        label="Ok"\n                        onClick={() => {\n                            this.isOpen500k = false;\n                        }}\n                    />\n                </limel-button-group>\n            </limel-dialog>\n        );\n    }\n')),o.a.createElement(a.MDXTag,{name:"p",components:n},"This is already a slight improvement. Since we gave each function a descriptive name, it's easier to understand what each dialog is for."),o.a.createElement(a.MDXTag,{name:"p",components:n},"Let's look at what's left of the render-method:"),o.a.createElement(a.MDXTag,{name:"pre",components:n},o.a.createElement(a.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-tsx",metaString:""}},'    public render() {\n\n        if (this.context.limetype === "company" && this.limeobject) {\n\n            return [\n                <limel-button\n                    primary={true}\n                    label="Change businesstatus"\n                    onClick={() => {\n                        this.isOpen = true;\n                    }}\n                />,\n\n            ];\n        }\n    }\n')),o.a.createElement(a.MDXTag,{name:"p",components:n},"Not very much, as it turns out. But, right now, the dialogs are never going to be rendered at all, only the button is. Let's fix that:"),o.a.createElement(a.MDXTag,{name:"pre",components:n},o.a.createElement(a.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-tsx",metaString:""}},'    public render() {\n\n        if (this.context.limetype === "company" && this.limeobject) {\n\n            return [\n                <limel-button\n                    primary={true}\n                    label="Change businesstatus"\n                    onClick={() => {\n                        this.isOpen = true;\n                    }}\n                />,\n                this.renderChangeStatusDialog(),\n                this.renderCreateTodoDialog(),\n                this.renderOpenTodoDialog(),\n                this.renderCreditCheckDialog(),\n            ];\n        }\n    }\n')),o.a.createElement(a.MDXTag,{name:"p",components:n},"That's pretty nice, isn't it?"),o.a.createElement(a.MDXTag,{name:"p",components:n},"The ",o.a.createElement(a.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"renderChangeStatusDialog")," function is still pretty complicated, so let's break that down in similar fashion:"),o.a.createElement(a.MDXTag,{name:"pre",components:n},o.a.createElement(a.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-tsx",metaString:""}},'    private renderChangeStatusDialog() {\n        return (\n            <limel-dialog\n                heading="Change businesstatus"\n                open={this.isOpen}\n                closingActions={{ escapeKey: false, scrimClick: false }}\n                onClose={() => {\n                    this.isOpen = false;\n                }}\n                onClosing={() => {\n                    this.isConfirmationOpen = true;\n                }}\n            >\n                <form>\n                    {this.renderStatusSelect()}\n                    {this.renderQuoteValueInput()}\n                    {this.renderBusinessValueInput()}\n                    {this.renderWonReasonInput()}\n                    {this.renderLostReasonInput()}\n                </form>\n                {this.renderButtons()}\n            </limel-dialog>\n        );\n    }\n\n    private renderStatusSelect() {\n        return (\n            <p>\n                <limel-select\n                    options={this.basicOptions}\n                    value={this.businesstatusValue}\n                    label="Business Status"\n                    onChange={event => {\n                        if (event.detail) {\n                            this.businesstatusValue = event.detail as Option;\n                        };\n                    }}\n                />\n                <p>Value: {JSON.stringify(this.businesstatusValue)}</p>\n            </p>\n        );\n    }\n\n    private renderQuoteValueInput() {\n        if (this.businesstatusValue[\'value\'] === \'tender\' && this.limeobject[\'tendervalue\'] === 0) {\n            return (\n                <p>\n                    <limel-input-field\n                        label="Quotevalue"\n                        key="tender"\n                        value={this.bValue ?this.bValue :this.limeobject[\'tendervalue\']}\n                        required={true}\n                        formatNumber={true}\n                        type="number"\n                        invalid={!this.bValueValid()}\n                        onChange={event => {\n                            this.bValue = +event.detail;\n                        }}\n                    />\n                </p>\n            );\n        }\n    }\n\n    private renderBusinessValueInput() {\n        if (this.businesstatusValue[\'value\'] === \'agreement\' && this.limeobject[\'businessvalue\'] === 0) {\n            return (\n                <p>\n                    <limel-input-field\n                        label="Businessvalue"\n                        key="agreement"\n                        value={this.bValue ?this.bValue :this.limeobject[\'businessvalue\']}\n                        formatNumber={true}\n                        type="number"\n                        invalid={!this.bValueValid()}\n                        onChange={event => {\n                            this.bValue = +event.detail;\n                        }}\n                    />\n                </p>\n            );\n        }\n    }\n\n    private renderWonReasonInput() {\n        if (this.businesstatusValue[\'value\'] === \'agreement\') {\n            return (\n                <p>\n                    <limel-input-field\n                        label="Won reason"\n                        required={true}\n                        key="agreement"\n                        value={this.wonlostreason}\n                        invalid={!this.wonLostReasonValid()}\n                        onChange={event => {\n                            this.wonlostreason = event.detail;\n                        }}\n                    />\n                </p>\n            );\n        }\n    }\n\n    private renderLostReasonInput() {\n        if (this.businesstatusValue[\'value\'] === \'rejection\') {\n            return (\n                <p>\n                    <limel-input-field\n                        label="Lost reason"\n                        required={true}\n                        key="rejection"\n                        value={this.wonlostreason}\n                        invalid={!this.wonLostReasonValid()}\n                        onChange={event => {\n                            this.wonlostreason = event.detail;\n                        }}\n                    />\n                </p>\n            );\n        }\n    }\n\n    private renderButtons() {\n        return (\n            <limel-button-group class="reverse-order" slot="button">\n                <limel-button\n                    primary={true}\n                    label="Save"\n                    disabled={!this.bValueValid()}\n                    onClick={() => {\n                        this.submitForm();\n                        console.log(this.bValue);\n                        console.log(this.wonlostreason);\n                        this.isCreateTodo = true;\n                        if (this.bValue > 500000) {\n                            this.isOpen500k = true;\n                        }\n                    }}\n                />\n                <limel-button label="Cancel" onClick={this.closeDialog} />\n            </limel-button-group>\n        );\n    }\n')),o.a.createElement(a.MDXTag,{name:"p",components:n},"Notice how every time we break a function down, we're left with descriptive function calls, and all the details of the implementation is moved further down in the file? This is a good thing. It makes it easy to get an overview of what a function does, without having to wade through a flood of implementation details. And if we need those details, we can just scroll down to where the relevant function is implemented."),o.a.createElement(a.MDXTag,{name:"p",components:n},"In the next section, we'll take a look at how to break these functions out into separate components."),o.a.createElement(a.MDXTag,{name:"p",components:n},o.a.createElement(a.MDXTag,{name:"em",components:n,parentName:"p"},"To be continued\u2026")))}}}]);