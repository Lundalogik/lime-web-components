(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{"./doc/tutorials/hello-task.mdx":function(e,n,a){"use strict";a.r(n);var t=a("./node_modules/react/index.js"),o=a.n(t),s=a("./node_modules/@mdx-js/tag/dist/index.js");function r(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},s=Object.keys(e);for(t=0;t<s.length;t++)a=s[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)a=s[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}n.default=function(e){var n=e.components;r(e,["components"]);return o.a.createElement(s.MDXTag,{name:"wrapper",components:n},o.a.createElement(s.MDXTag,{name:"h1",components:n,props:{id:"hello-task"}},"Hello, Task!"),o.a.createElement(s.MDXTag,{name:"p",components:n},"This guide will show how to use the task service to create a new task that will run asynchronously and display a simple\ntoast when it has completed."),o.a.createElement(s.MDXTag,{name:"h2",components:n,props:{id:"generate-a-task"}},"Generate a task"),o.a.createElement(s.MDXTag,{name:"p",components:n},'We will start by creating a new plugin named "Sleepy" that will sleep for a period of time and return a message when it\nis done. We will need to generate the following:'),o.a.createElement(s.MDXTag,{name:"ul",components:n},o.a.createElement(s.MDXTag,{name:"li",components:n,parentName:"ul"},"A translation module"),o.a.createElement(s.MDXTag,{name:"li",components:n,parentName:"ul"},"A command to put into the action menu in the table view"),o.a.createElement(s.MDXTag,{name:"li",components:n,parentName:"ul"},"An endpoint that creates the task"),o.a.createElement(s.MDXTag,{name:"li",components:n,parentName:"ul"},"The task itself")),o.a.createElement(s.MDXTag,{name:"pre",components:n},o.a.createElement(s.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-bash",metaString:""}},"lime-project new plugin\ncd sleepy\nlime-project generate translation-module\nlime-project generate command sleep\nlime-project generate tasks\n")),o.a.createElement(s.MDXTag,{name:"h2",components:n,props:{id:"the-command"}},"The command"),o.a.createElement(s.MDXTag,{name:"p",components:n},"The command will take a number as argument that represents the number of seconds that the task will be asleep for. The\ntimeout will be configurable from the config when it is added to the action menu."),o.a.createElement(s.MDXTag,{name:"p",components:n},"Add the ",o.a.createElement(s.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"timeout")," property to the ",o.a.createElement(s.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"SleepCommand")," class."),o.a.createElement(s.MDXTag,{name:"pre",components:n},o.a.createElement(s.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-typescript",metaString:""}},"// frontend/src/commands/sleep/sleep.command.ts\n\n@Command({\n    id: 'sleepy.sleep'\n})\nexport class SleepCommand {\n    public timeout: number;\n}\n")),o.a.createElement(s.MDXTag,{name:"p",components:n},"In the command handler, we are going to use the ",o.a.createElement(s.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"TaskService")," to create the task."),o.a.createElement(s.MDXTag,{name:"pre",components:n},o.a.createElement(s.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-typescript",metaString:""}},"// frontend/src/commands/sleep/sleep.handler.ts\n\nexport class SleepHandler implements CommandHandler {\n    constructor(private tasks: TaskService) {}\n\n    public async handle(command: SleepCommand) {\n        const url = 'sleepy/task/sleep/';\n\n        const id = await this.tasks.create(url, command);\n        console.log(`Created task with id ${id}`);\n    }\n}\n")),o.a.createElement(s.MDXTag,{name:"p",components:n},"We also need to register our handler with our command in the ",o.a.createElement(s.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Loader")," component"),o.a.createElement(s.MDXTag,{name:"pre",components:n},o.a.createElement(s.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-typescript",metaString:""}},"// frontend/src/components/lwc-sleepy-loader/lwc-sleepy-loader.tsx\n\nexport class Loader implements LimePluginLoader {\n    public componentWillLoad() {\n        this.platform.commandBus.register(SleepCommand, new SleepHandler(this.platform.state.tasks));\n    }\n}\n")),o.a.createElement(s.MDXTag,{name:"p",components:n}," All frontend coding is done now so we can go ahead and build the project."),o.a.createElement(s.MDXTag,{name:"pre",components:n},o.a.createElement(s.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-bash",metaString:""}},"cd frontend\nnpm run build\n")),o.a.createElement(s.MDXTag,{name:"h2",components:n,props:{id:"the-endpoint"}},"The endpoint"),o.a.createElement(s.MDXTag,{name:"p",components:n},"The endpoint that was generated is responsible for creating the task. The file ",o.a.createElement(s.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"sleepy/endpoints/task_endpoint.py"),"\ncontains some autogenerated code that we can replace with our own."),o.a.createElement(s.MDXTag,{name:"pre",components:n},o.a.createElement(s.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-python",metaString:""}},"sleep_args = {\n    \"timeout\": fields.Number(required=True)\n}\n\nclass SleepyTaskHandler(webserver.LimeResource):\n    @use_args(sleep_args)\n    def post(self, args):\n        return lime_task.send_task(\n                'sleepy.tasks.tasks.sleep',\n                self.application,\n                args['timeout']).to_dict()\n\napi.add_resource(SleepyTaskHandler, '/task/sleep/')\n")),o.a.createElement(s.MDXTag,{name:"h2",components:n,props:{id:"the-task"}},"The task"),o.a.createElement(s.MDXTag,{name:"p",components:n},"The task itself is really simple, it will just sleep for the given amount of time and then return a message. We can\nremove all of the autogenerated code in ",o.a.createElement(s.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"sleepy/tasks/tasks.py")," and add our own."),o.a.createElement(s.MDXTag,{name:"pre",components:n},o.a.createElement(s.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-python",metaString:""}},'from lime_task import task\nimport time\n\n@task\ndef sleep(app, timeout):\n    time.sleep(timeout)\n\n    return "Slept for " + str(timeout) + " seconds"\n')),o.a.createElement(s.MDXTag,{name:"h2",components:n,props:{id:"installation-and-configuration"}},"Installation and configuration"),o.a.createElement(s.MDXTag,{name:"p",components:n},"All coding should be done now and we can go ahead and install our plugin. Please note that the plugin needs to be\ninstalled both on the appserver and on the taskhandler. Once installed, both services have to be restarted."),o.a.createElement(s.MDXTag,{name:"p",components:n},"To add our command to the action menu in the table view, we need to configure the table view for the one of the\nlimetypes in lime-admin. The following snippet will add our action and configure our task to sleep for 15 seconds."),o.a.createElement(s.MDXTag,{name:"pre",components:n},o.a.createElement(s.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-json",metaString:""}},'{\n  "actions": [{\n    "id": "sleepy.sleep",\n    "params": {\n      "timeout": 15\n    }\n  }]\n}\n')),o.a.createElement(s.MDXTag,{name:"h2",components:n,props:{id:"testing-our-plugin"}},"Testing our plugin"),o.a.createElement(s.MDXTag,{name:"p",components:n},"We can now go ahead and test our plugin. Navigate to the table that has the action added to the menu and click it. A\nnotification should be displayed indicating that the task is about to be created. Unless it is canceled, a new\nnotification should be displayed telling us that it was created successfully. Depending on how much work is being done\non the taskhandler, the task might have been queued up so there is no way of knowing how long it will take until it\nreturns a result. After a while though it should return and a new message should be displayed with the result of the\noperation."))}}}]);